name: Deploy Engineer Blog

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Add required permissions for GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  CACHE_VERSION: 'v1'

jobs:
  # Security and Code Quality
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit (production only)
        run: npm audit --production --audit-level=moderate
        continue-on-error: false
        
      - name: Run npm audit (all dependencies)
        run: npm audit --audit-level=moderate || echo "Dev dependency vulnerabilities exist but are acceptable"
        continue-on-error: true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        if: env.SNYK_TOKEN != ''
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --sarif-file-output=snyk.sarif

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: env.SNYK_TOKEN != '' && hashFiles('snyk.sarif') != ''
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          sarif_file: snyk.sarif

  # Code Quality Checks
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:check

      - name: Check TypeScript
        run: npx tsc --noEmit || echo "TypeScript check completed with warnings"
        continue-on-error: true

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    name: Unit Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build project
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Performance Testing
  performance:
    runs-on: ubuntu-latest
    name: Performance Audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Start server for Lighthouse
        run: |
          npm run serve &
          sleep 5
          echo "üåê Server started on http://localhost:3000"

      - name: Run Lighthouse Audits
        run: |
          echo "üîç Starting Lighthouse Performance Audit..."
          # Create output directory
          mkdir -p lighthouse-results
          
          # Run Lighthouse directly without CI wrapper for better control
          echo "Running audit on homepage..."
          npx lighthouse http://localhost:3000 \
            --output=html,json \
            --output-path=./lighthouse-results/homepage \
            --chrome-flags="--headless --no-sandbox" \
            --only-categories=performance,accessibility,best-practices,seo \
            --skip-audits=uses-http2 \
            || echo "‚ö†Ô∏è Homepage audit completed with warnings"
          
          echo "Running audit on blog page..."
          npx lighthouse http://localhost:3000/blog.html \
            --output=html,json \
            --output-path=./lighthouse-results/blog \
            --chrome-flags="--headless --no-sandbox" \
            --only-categories=performance,accessibility,best-practices,seo \
            --skip-audits=uses-http2 \
            || echo "‚ö†Ô∏è Blog page audit completed with warnings"
          
          echo "‚úÖ Performance audits completed"
          echo "üìÅ Generated reports:"
          ls -la lighthouse-results/
          
          # Kill the server
          pkill -f "npm run serve" || true
        continue-on-error: true

      - name: Extract performance metrics
        if: always()
        run: |
          # Ensure we have something to upload
          mkdir -p lighthouse-results
          
          # Create a summary report
          echo "# Lighthouse Performance Audit Report" > lighthouse-results/summary.md
          echo "" >> lighthouse-results/summary.md
          echo "**Date:** $(date)" >> lighthouse-results/summary.md
          echo "**Commit:** ${{ github.sha }}" >> lighthouse-results/summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> lighthouse-results/summary.md
          echo "" >> lighthouse-results/summary.md
          
          # Extract scores from JSON if available
          if [ -f "lighthouse-results/homepage.report.json" ]; then
            echo "## Homepage Scores" >> lighthouse-results/summary.md
            echo "üè† **Homepage Performance Metrics:**" >> lighthouse-results/summary.md
            cat lighthouse-results/homepage.report.json | \
              jq -r '.categories | to_entries[] | "- \(.key): \(.value.score * 100)%"' >> lighthouse-results/summary.md 2>/dev/null || \
              echo "Unable to extract detailed scores" >> lighthouse-results/summary.md
            echo "" >> lighthouse-results/summary.md
          fi
          
          if [ -f "lighthouse-results/blog.report.json" ]; then
            echo "## Blog Page Scores" >> lighthouse-results/summary.md
            echo "üìù **Blog Page Performance Metrics:**" >> lighthouse-results/summary.md
            cat lighthouse-results/blog.report.json | \
              jq -r '.categories | to_entries[] | "- \(.key): \(.value.score * 100)%"' >> lighthouse-results/summary.md 2>/dev/null || \
              echo "Unable to extract detailed scores" >> lighthouse-results/summary.md
            echo "" >> lighthouse-results/summary.md
          fi
          
          # Check if reports exist
          if ls lighthouse-results/*.html 1> /dev/null 2>&1; then
            echo "‚úÖ Lighthouse reports generated successfully!" >> lighthouse-results/summary.md
            echo "" >> lighthouse-results/summary.md
            echo "HTML reports are available as artifacts." >> lighthouse-results/summary.md
          else
            echo "‚ö†Ô∏è No detailed Lighthouse reports were generated." >> lighthouse-results/summary.md
          fi
          
          echo "üìä Contents of lighthouse-results:"
          ls -la lighthouse-results/

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: lighthouse-results/
          if-no-files-found: warn
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            let comment = '## üìä Lighthouse Performance Audit\n\n';
            
            try {
              // Try to read manifest if it exists
              const manifestPath = '.lighthouseci/manifest.json';
              if (fs.existsSync(manifestPath)) {
                const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
                comment += '‚úÖ Performance audit completed successfully\n';
                comment += `üìù ${manifest.length || 0} URL(s) audited\n`;
              } else {
                comment += '‚ö†Ô∏è Performance audit ran but no detailed results available\n';
              }
            } catch (e) {
              comment += '‚ö†Ô∏è Performance audit completed with warnings\n';
            }
            
            comment += '\nView full report in the workflow artifacts.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Build and Deploy
  build-and-deploy:
    needs: [security-scan, quality-checks, test, e2e-tests]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Generate blog posts
        run: npm run build:blog

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment notification
        run: |
          echo "üöÄ Blog deployed successfully!"
          echo "üìç Live at: ${{ steps.deployment.outputs.page_url }}"
          echo "üìä Build info: Node.js ${{ env.NODE_VERSION }}, Commit: ${{ github.sha }}"

      - name: Create deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

  # Workflow Summary
  summary:
    runs-on: ubuntu-latest
    name: Workflow Summary
    needs: [security-scan, quality-checks, test, e2e-tests, performance]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "# üìä Workflow Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîí Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || needs.security-scan.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìù Code Quality | ${{ needs.quality-checks.result == 'success' && '‚úÖ Passed' || needs.quality-checks.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ Unit Tests | ${{ needs.test.result == 'success' && '‚úÖ Passed' || needs.test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üé≠ E2E Tests | ${{ needs.e2e-tests.result == 'success' && '‚úÖ Passed' || needs.e2e-tests.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö° Performance | ${{ needs.performance.result == 'success' && '‚úÖ Passed' || needs.performance.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Workflow Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Version:** ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "## üöÄ Deployment" >> $GITHUB_STEP_SUMMARY
            echo "Deployment to GitHub Pages will proceed if all required checks pass." >> $GITHUB_STEP_SUMMARY
          fi
